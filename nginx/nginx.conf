user  nginx;
worker_processes  auto;

# error_log  /var/log/nginx/error.log notice;
error_log  /dev/stderr notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $host';

    # access_log  /var/log/nginx/access.log  main;
    access_log  /dev/stdout  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    # Define a map to check if the Sec-WebSocket-Protocol contains "choreo-internal-API-Key"
    # finalized
    map $http_sec_websocket_protocol $remove_header {
        default                         0;
        "~\bchoreo-internal-API-Key,"   1;
    }

    # Define a map to extract the second value from the Sec-WebSocket-Protocol header
    # finalized
    map $http_sec_websocket_protocol $api_key {
        default                         $http_api_key;
        "~^choreo-internal-API-Key, *(?<apikey>[^,]*)"    $apikey;
    }

    # Define a map to remove the first two values if the first value is "choreo-internal-API-Key"
    # finalized
    map $http_sec_websocket_protocol $console_sec_ws_protocol_header {
        default '';
        "~^choreo-internal-API-Key, *[^,]+, *([^,]+(?:,.*)?)$" $1;  # Capture everything after the second value
    }

    # Map for connection upgrade
    map $http_upgrade $connection_upgrade {
        default          upgrade;
        ''               '';
    }

    # # Map for setting the response header
    map $remove_header $sec_ws_protocol_res_header {
        1           "choreo-internal-API-Key";
        0           $upstream_http_sec_websocket_protocol;
    }

    server {
        listen 8080;
        location / {
        
         # finalized
            set $sec_ws_protocol_header $http_sec_websocket_protocol;
            set $console_api_key $http_api_key;

            if ($remove_header) {
                set $sec_ws_protocol_header $console_sec_ws_protocol_header;
                set $console_api_key $api_key;
            }

            # if ($upstream_http_sec_websocket_protocol = '') {
            #     add_header Sec-WebSocket-Protocol $sec_ws_protocol_res_header always;
            # }

            proxy_set_header API-Key $console_api_key;
            proxy_set_header Sec-Websocket-Protocol $sec_ws_protocol_header;
            # finalized
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_pass http://host.docker.internal:9090;

            # todo
            proxy_hide_header Sec-WebSocket-Protocol;
            add_header Sec-WebSocket-Protocol $sec_ws_protocol_res_header always;
        }

        location ~ \.(gif|jpg|png)$ {
            root /data/images;
        }
    }

    server {
        listen 8443 ssl;

        ssl_certificate /certs/listener.pem;
        ssl_certificate_key /certs/listener.key;
        ssl_client_certificate /certs/client.pem;
        ssl_verify_client on;

        proxy_set_header X-CLIENT-CERTIFICATE $ssl_client_escaped_cert;

        location / {
            proxy_set_header X-CLIENT-CERTIFICATE $ssl_client_escaped_cert;
            rewrite ^/foo/bar /bar;
            proxy_pass http://upstream-service:8080/;
        }

        location ~ \.(gif|jpg|png)$ {
            root /data/images;
        }
    }
}
