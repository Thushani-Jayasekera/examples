static_resources:

  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          # access_log:
          # - name: envoy.access_loggers.stdout
          #   typed_config:
          #     "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          http_filters:
          - name: lua_filter_with_custom_name_0
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  local request_from_choreo_console = false
                  function envoy_on_request(request_handle)
                    local headers = request_handle:headers()
                    local sec_websocket_protocol = headers:get("Sec-WebSocket-Protocol")
                    local token_pattern = "choreo%-internal%-API%-Key"
                    request_handle:logInfo("sec_websocket_protocol: " .. sec_websocket_protocol)
                    if sec_websocket_protocol then
                      local internal_key_index = string.find(sec_websocket_protocol, token_pattern)
                      request_handle:logInfo("internal_key_index: " .. internal_key_index)
                      if internal_key_index then
                        request_from_choreo_console = true
                        local token = string.match(sec_websocket_protocol, "choreo%-internal%-API%-Key,?%s*([^,]+)")
                        if token then
                          request_handle:headers():add("API-Key", token)
                          -- Remove "choreo-internal-API-Key, token" from the sec-websocket-protocol header
                          local new_protocol = string.gsub(sec_websocket_protocol, "choreo%-internal%-API%-Key,?%s*[^,]*,?%s*", "")
                          -- Remove any leading or trailing commas and spaces
                          new_protocol = string.gsub(new_protocol, "^%s*,%s*", "")
                          new_protocol = string.gsub(new_protocol, "%s*,%s*$", "")
                          -- Replace the sec-websocket-protocol header
                          if new_protocol == "" then
                            request_handle:headers():remove("sec-websocket-protocol")
                          else
                            request_handle:headers():replace("sec-websocket-protocol", new_protocol)
                          end
                        end
                      end
                    end
                  end

                  function envoy_on_response(response_handle)
                    -- Set the sec-websocket-protocol header in the response
                    if request_from_choreo_console then
                      response_handle:headers():replace("sec-websocket-protocol", "choreo-internal-API-Key")
                    end
                  end
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          # websocket proxying
          upgrade_configs:
          - upgrade_type: websocket
          #set idle timeouts - https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
          stream_idle_timeout: 900s
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: service_envoyproxy_io
          access_log:
            - name: envoy.access_loggers.file
              filter:
                not_health_check_filter: {}
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout
                log_format:
                  json_format:
                    timestamp: "%START_TIME%"
                    protocol: "%PROTOCOL%"
                    requestMethod: "%REQ(:METHOD)%"
                    path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                    duration: "%DURATION%"
                    responseCode: "%RESPONSE_CODE%"
                    reponseFlags: "%RESPONSE_FLAGS%"
                    bytesReceived: "%BYTES_RECEIVED%"
                    bytesSent: "%BYTES_SENT%"
                    requestForwadedFor: "%REQ(X-FORWARDED-FOR)%"
                    requestId: "%REQ(X-REQUEST-ID)%"
                    authority: "%REQ(:AUTHORITY)%"
                    cluster: "%UPSTREAM_CLUSTER%"
                    upstreamHost: "%UPSTREAM_HOST%"

  clusters:
  - name: service_envoyproxy_io
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: service_envoyproxy_io
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 0.0.0.0
                port_value: 8085
    # transport_socket:
    #   name: envoy.transport_sockets.tls
    #   typed_config:
    #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
    #     sni: www.envoyproxy.io
